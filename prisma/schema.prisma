// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EmbeddingModel {
  openai_text_embedding_3_small
  openai_text_embedding_3_large
  openai_text_embedding_ada_002
}

enum ProjectStatus {
  PENDING
  PROCESSING
  COMPLETED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id              BigInt         @id @default(autoincrement())
  name            String
  embedding_model EmbeddingModel
  createdAt       DateTime       @default(now())
  userId          String
  status          ProjectStatus  @default(PENDING)
  documents       Document[]
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Document {
  id        BigInt  @id @default(autoincrement())
  content   String?
  embedding Unsupported("vector(1536)")?
  metadata  Json?   @db.JsonB // Storing additional metadata
  projectId BigInt  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  updatedAt DateTime @default(now()) @updatedAt

  @@map("documents")
}
